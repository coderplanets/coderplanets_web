name: CI

on:
  push:
    branches: [dev]
  pull_request:
    branches: [master, dev]

jobs:
  e2e-test:
    name: e2e test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: groupher_server_ci
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # - name: (Backend) checkout codebase
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0
      #     repository: 'coderplanets/coderplanets_server'
      #     path: 'backend_server'
      # - name: (Backend) Setup Elixir and OTP
      #   uses: erlef/setup-elixir@v1
      #   with:
      #     elixir-version: '1.10.3' # Define the elixir version [required]
      #     otp-version: '22.3' # Define the OTP version [required]
      # - name: (Backend) Restore dependencies cache
      #   uses: actions/cache@v2
      #   with:
      #     path: deps
      #     key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
      #     restore-keys: ${{ runner.os }}-mix-
      # - name: (Backend) Install Packages
      #   working-directory: ./backend_server
      #   run: mix deps.get > /dev/null
      # - name: (Backend) run migration
      #   working-directory: ./backend_server
      #   run: MIX_ENV=ci MIX_ENV=ci mix ecto.migrate > /dev/null
      # - name: (Backend) set up test DB
      #   working-directory: ./backend_server
      #   run: MIX_ENV=ci mix ecto.setup > /dev/null
      # - name: (Backend) seed data into DB
      #   working-directory: ./backend_server
      #   run: MIX_ENV=ci mix run priv/mock/cps_seeds.exs > /dev/null
      # - name: (Backend) Run Server
      #   working-directory: ./backend_server
      #   run: MIX_ENV=ci mix phx.server &

      - name: (Frontend) checkout codebase
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: 'coderplanets/coderplanets_web'
          path: 'frontend_server'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: (Frontend) setup node env
        uses: actions/setup-node@v2
        with:
          node-version: '15.0.1'
      - name: (Frontend) Install Packages
        working-directory: ./frontend_server
        run: yarn
      - name: (Frontend) Setup Config CMD Tools
        working-directory: ./frontend_server
        run: chmod +x ./utils/bin/jq-linux; ./utils/bin/jq-linux -s '.[0] * .[1]' config/config.json config/config.ci.json > /tmp/config.json; cp /tmp/config.json ./config/config.json
      # - name: (Frontend) Build Project
      #   working-directory: ./frontend_server
      #   run: npm run build.ci
      - name: check /etc/hosts
        working-directory: ./frontend_server
        run: echo "#>>>>#"; cat /etc/hosts; pwd; echo "#>>>>#"
      # - name: (Frontend) Check Bundle Size
      #   working-directory: ./frontend_server
      #   run: BUNDLEWATCH_GITHUB_TOKEN=${{ secrets.BUNDLEWATCH_GITHUB_TOKEN }} npm run size.check
      # - name: (Frontend) Run e2e Tests
      #   working-directory: ./frontend_server
      #   run: npm run test:ci
  cypress-run:
    name: Cypress run
    runs-on: ubuntu-latest
    steps:
      - name: Cypress run
        working-directory: ./frontend_server
        uses: cypress-io/github-action@v2
        with:
          browser: chrome
          # build: npm run build
          start: npm run ci
          wait-on: http://localhost:3000
